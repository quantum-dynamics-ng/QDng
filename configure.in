AC_INIT([QDng], [alpha-0.6.1])
AC_CONFIG_SRCDIR([configure.in])

AM_CONFIG_HEADER(src/config.h)
AM_INIT_AUTOMAKE

AC_LANG([C++])
AC_PROG_CXX
AC_PROG_F77

AC_PROG_LEX
if test "x$LEX" == x; then
  AC_MSG_ERROR(lex is missing)
fi

AC_PROG_YACC
if test "x$YACC" == x; then
  AC_MSG_ERROR(Yacc or bison is missing)
fi


AM_PROG_LIBTOOL

dnl Check for standard functions
AC_CHECK_HEADERS([fcntl.h],,AC_MSG_ERROR(fcntl.h not found))
AC_CHECK_HEADERS([limits.h],,AC_MSG_ERROR(limits.h not found))
AC_CHECK_HEADERS([malloc.h])

AC_CHECK_FUNCS([pow],,AC_MSG_ERROR(power function not found))
AC_CHECK_FUNCS([sqrt],,AC_MSG_ERROR(sqrt function not found))
AC_CHECK_FUNCS([mkdir],,AC_MSG_ERROR(mkdir function not found))
AC_CHECK_FUNCS([ftruncate],,AC_MSG_ERROR(ftruncate function not found))
AC_CHECK_FUNCS([munmap],,AC_MSG_ERROR(munmap function not found))
AC_CHECK_FUNCS([mmap],,AC_MSG_ERROR(mmap function not found))
AC_CHECK_FUNCS([malloc],,AC_MSG_ERROR(malloc function not found))
AC_CHECK_FUNCS([memset],,AC_MSG_ERROR(memset function not found))
AC_CHECK_FUNCS([strdup],,AC_MSG_ERROR(strdup function not found))
AC_CHECK_FUNCS([strstr],,AC_MSG_ERROR(strstr function not found))
AC_CHECK_FUNCS([uname])
AC_CHECK_HEADERS([malloc.h])

AC_TYPE_SIZE_T
AC_TYPE_MODE_T

AC_C_INLINE
AC_HEADER_STDBOOL
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB


dnl
dnl Compiler flags for development
dnl
AC_ARG_ENABLE([devel],
              [AS_HELP_STRING([--enable-devel],[Enable gcc pedantic code checking])],
              [enable_devel=yes; DEVEL_FLAGS="-Werror -pedantic -pedantic-errors -Wall -Wdiv-by-zero -ansi -Wall"],
              [enable_devel=no; DEVEL_FLAGS=""])

AC_SUBST(DEVEL_FLAGS)

dnl
dnl Optimization Flags
dnl
AC_ARG_ENABLE([gccopt],
              [AS_HELP_STRING([--enable-gccopt],[Enable gcc specific optimizations (default: enabled)])],
              [if test "x$enableval" = "xyes"; then
                  enable_opt=yes;
                  OPT_FLAGS="-O3 -funroll-loops -ffast-math";
               else
                  enable_opt=no;
                  OPT_FLAGS=""
               fi],
              [enable_opt=yes; OPT_FLAGS="-O3 -funroll-loops -ffast-math"])

AC_SUBST(OPT_FLAGS)

dnl
dnl Matlab Library
dnl
sinclude([m4/mex_init.m4])
sinclude([m4/matlab.m4])
MEX_INIT([MEX],[1],[1],[2])
CHECK_MATLAB


dnl
dnl OpenMP
dnl
sinclude([m4/ax_openmp.m4])
AC_ARG_ENABLE([openmp],
	      [AS_HELP_STRING([--enable-openmp],[Enable OpenMP parallelization])],
	      [AX_OPENMP(enable_openmp=yes,AC_MSG_ERROR(Compiler doesn't provide OpenMP))],
	      [enable_openmp=no])

AM_CONDITIONAL([HAVEOPENMP],[test "x$enable_openmp"="xyes"] )


AC_ARG_ENABLE([internalfftw],
              [AS_HELP_STRING([--enable-internalfftw],[Enable internal fftw library])],
              [use_internal_fftw=yes],
              [use_internal_fftw=no])

dnl
dnl Prepare for interal fftw3
dnl 
FFTW_INCLUDE=""
if test "x$have_matlab" = "xyes" -o "x$use_internal_fftw" = "xyes"; then
   use_internal_fftw=yes;
   AC_MSG_NOTICE([Using shipped fftw3])
   FFTW_INCLUDE="\$(top_srcdir)/fftw/api";
   FFTW_LIBS="\$(top_builddir)/fftw/libfftw3.la";
   if test "x$enable_openmp" = "xyes"; then
      FFTW_LIBS="\$(top_builddir)/fftw/threads/.libs/libfftw3_threads.la $FFTW_LIBS";
   fi
   FFTW_CFLAGS="";
   AC_SUBST(FFTW_INCLUDE)
   AC_SUBST(FFTW_LIBS)
   AC_SUBST(FFTW_CFLAGS)
fi 

AM_CONDITIONAL(FFTW_INTERNAL, test "x$use_internal_fftw" = "xyes" )

dnl
dnl External fftw3
dnl
sinclude([m4/acx_fftw3.m4])
if test "x$use_internal_fftw" != "xyes"; then
   ACX_FFTW3
fi


AC_ARG_ENABLE([sse2],
	      [AS_HELP_STRING([--enable-sse2],[Explictly enable SSE2 optimizations])],
	      [enable_sse2 = "xyes" ; AC_DEFINE([HAVE_SSE2], [1], [Explictly enable SSE2 optimizations])])

AC_ARG_ENABLE([avx],
	      [AS_HELP_STRING([--enable-avx],[Explictly enable AVX optimizations])],
	      [enable_sse2 = "xyes" ; AC_DEFINE([HAVE_AVX], [1], [Explictly enable AVX optimizations])])
dnl zlib
sinclude([m4/ax_check_zlib.m4])
AX_CHECK_ZLIB()

dnl bzip2
sinclude([m4/ax_libbz2.m4])
AX_CHECK_LIBBZ2()



dnl libxml2
sinclude([m4/acx_libxml2.m4])
ACX_CHECK_LIBXML2


dnl blas/lapack
sinclude([m4/acx_blas.m4])
sinclude([m4/acx_lapack.m4])
ACX_BLAS(,AC_MSG_ERROR(BLAS libs are missing/not working))
ACX_LAPACK(,AC_MSG_ERROR(LAPACK is missing/not working))


dnl Configure C/F77 mixed mode (RT libs)
AC_F77_LIBRARY_LDFLAGS
AC_F77_WRAPPERS


AC_ARG_ENABLE([mods],
	      [AS_HELP_STRING([--enable-mods],[Enable dynamic loadable modules])],
	      AC_DEFINE([USE_DYNMODS], [1], [Enable dynamic loadable modules]))


dnl AC_ARG_ENABLE([mpi],
dnl	    [AS_HELP_STRING([--enable-mpi],[Build with support for mpi parallization])],
dnl	    [],enable_mpi=no)

dnl AC_ARG_WITH([mpi-prefix],
dnl	    [AS_HELP_STRING([--with-mpi-prefix=PATH],[Prefix of the mpi installation])],
dnl	    [],with_mpi-prefix=no)


AC_CONFIG_FILES(
		[Makefile src/Makefile src/qdlib/Makefile src/tools/Makefile 
		 src/fft/Makefile src/math/Makefile src/modules/Makefile
		 src/tests/Makefile src/slatec/Makefile src/linalg/Makefile
		 src/lib/Makefile src/mex/Makefile src/mex/libs/Makefile tests/Makefile src/simpleXml/Makefile
		 tests/TGE-GSPO.qdi tests/TGE-SPO.qdi tests/TGE-Cheby.qdi tests/TGE-SIL.qdi
		 tests/TGP-Expec.qdi tests/TGP-Expec-SP.qdi tests/TGP-NIP-Cheby.qdi
		 tests/TGP-Kick.qdi tests/TGP-Gmat.qdi
		 tests/TGPMS-Cheby.qdi tests/TGPMS-GSPO.qdi
		 tests/TGPLMS-Cheby.qdi tests/TGPLMS-SIL.qdi
		 tests/TGPL-IR-Pulse-Cheby.qdi tests/TGPL-IR-Pulse-GSPO.qdi
                 tests/TLP-H-GSPO.qdi tests/TLP-H-Cheby.qdi
                 tests/TLP-C-GSPO.qdi tests/TLP-C-Cheby.qdi
                 tests/TLPL-GSPO.qdi tests/TLPL-Cheby.qdi
                 tests/TGO-IR-Freq.qdi tests/TGO-IR-Krotov.qdi tests/TGO-IR-Rabitz.qdi
                 tests/TGO-IR-Krotov-Projection.qdi tests/TGO-UV-Krotov.qdi tests/TLO-Cheby.qdi ])

AC_ARG_WITH([cppunit], 
      [AS_HELP_STRING([--with-cppunit], [Enable CppUnit tests])],
      [with_cppunit=yes],
      [with_cppunit=no])

AM_CONDITIONAL([CPPUNIT], [test "x$with_cppunit" != "xno"])
     
AC_OUTPUT

dnl
dnl Subconfigure the fftw.
dnl
if test "x$use_internal_fftw" = "xyes"; then
   AC_MSG_NOTICE([Configure shipped fftw])
   mkdir -p fftw;
   cd fftw;
   if test "x$enable_openmp" = "xyes"; then fftw_thread_config="--enable-threads"; else fftw_thread_config=""; fi
   if test "x$enable_sse2" = "xyes"; then optconf="--enable-sse2"; fi
   if test "x$enable_avx" = "xyes"; then optconf="$optconf --enable-avx"; fi
   ../${srcdir}/fftw/configure CFLAGS="-fPIC -O3" --prefix=${prefix} "$fftw_thread_config" "$optconf"
   cd ..
fi

