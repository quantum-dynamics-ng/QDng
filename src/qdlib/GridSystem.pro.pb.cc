// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GridSystem.pro.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QDLIB {

namespace {

const ::google::protobuf::Descriptor* GridSystemHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridSystemHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridSystemHeader_dim_description_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridSystemHeader_dim_description_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GridSystem_2epro() {
  protobuf_AddDesc_GridSystem_2epro();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GridSystem.pro");
  GOOGLE_CHECK(file != NULL);
  GridSystemHeader_descriptor_ = file->message_type(0);
  static const int GridSystemHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSystemHeader, dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSystemHeader, dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSystemHeader, data_size_),
  };
  GridSystemHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridSystemHeader_descriptor_,
      GridSystemHeader::default_instance_,
      GridSystemHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSystemHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSystemHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridSystemHeader));
  GridSystemHeader_dim_description_t_descriptor_ = GridSystemHeader_descriptor_->nested_type(0);
  static const int GridSystemHeader_dim_description_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSystemHeader_dim_description_t, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSystemHeader_dim_description_t, xmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSystemHeader_dim_description_t, xmax_),
  };
  GridSystemHeader_dim_description_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridSystemHeader_dim_description_t_descriptor_,
      GridSystemHeader_dim_description_t::default_instance_,
      GridSystemHeader_dim_description_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSystemHeader_dim_description_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridSystemHeader_dim_description_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridSystemHeader_dim_description_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GridSystem_2epro);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridSystemHeader_descriptor_, &GridSystemHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridSystemHeader_dim_description_t_descriptor_, &GridSystemHeader_dim_description_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GridSystem_2epro() {
  delete GridSystemHeader::default_instance_;
  delete GridSystemHeader_reflection_;
  delete GridSystemHeader_dim_description_t::default_instance_;
  delete GridSystemHeader_dim_description_t_reflection_;
}

void protobuf_AddDesc_GridSystem_2epro() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016GridSystem.pro\022\005QDLIB\"\271\001\n\020GridSystemHe"
    "ader\022\017\n\004dims\030\001 \002(\r:\0010\0226\n\003dim\030\002 \003(\0132).QDL"
    "IB.GridSystemHeader.dim_description_t\022\024\n"
    "\tdata_size\030\003 \001(\004:\0010\032F\n\021dim_description_t"
    "\022\017\n\004size\030\001 \002(\r:\0010\022\017\n\004xmin\030\002 \002(\001:\0010\022\017\n\004xm"
    "ax\030\003 \002(\001:\0010", 211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GridSystem.pro", &protobuf_RegisterTypes);
  GridSystemHeader::default_instance_ = new GridSystemHeader();
  GridSystemHeader_dim_description_t::default_instance_ = new GridSystemHeader_dim_description_t();
  GridSystemHeader::default_instance_->InitAsDefaultInstance();
  GridSystemHeader_dim_description_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GridSystem_2epro);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GridSystem_2epro {
  StaticDescriptorInitializer_GridSystem_2epro() {
    protobuf_AddDesc_GridSystem_2epro();
  }
} static_descriptor_initializer_GridSystem_2epro_;


// ===================================================================

#ifndef _MSC_VER
const int GridSystemHeader_dim_description_t::kSizeFieldNumber;
const int GridSystemHeader_dim_description_t::kXminFieldNumber;
const int GridSystemHeader_dim_description_t::kXmaxFieldNumber;
#endif  // !_MSC_VER

GridSystemHeader_dim_description_t::GridSystemHeader_dim_description_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GridSystemHeader_dim_description_t::InitAsDefaultInstance() {
}

GridSystemHeader_dim_description_t::GridSystemHeader_dim_description_t(const GridSystemHeader_dim_description_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GridSystemHeader_dim_description_t::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0u;
  xmin_ = 0;
  xmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridSystemHeader_dim_description_t::~GridSystemHeader_dim_description_t() {
  SharedDtor();
}

void GridSystemHeader_dim_description_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridSystemHeader_dim_description_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridSystemHeader_dim_description_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridSystemHeader_dim_description_t_descriptor_;
}

const GridSystemHeader_dim_description_t& GridSystemHeader_dim_description_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GridSystem_2epro();  return *default_instance_;
}

GridSystemHeader_dim_description_t* GridSystemHeader_dim_description_t::default_instance_ = NULL;

GridSystemHeader_dim_description_t* GridSystemHeader_dim_description_t::New() const {
  return new GridSystemHeader_dim_description_t;
}

void GridSystemHeader_dim_description_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = 0u;
    xmin_ = 0;
    xmax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridSystemHeader_dim_description_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 size = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_xmin;
        break;
      }
      
      // required double xmin = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_xmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xmin_)));
          set_has_xmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_xmax;
        break;
      }
      
      // required double xmax = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_xmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xmax_)));
          set_has_xmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GridSystemHeader_dim_description_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 size = 1 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->size(), output);
  }
  
  // required double xmin = 2 [default = 0];
  if (has_xmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->xmin(), output);
  }
  
  // required double xmax = 3 [default = 0];
  if (has_xmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->xmax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GridSystemHeader_dim_description_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 size = 1 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->size(), target);
  }
  
  // required double xmin = 2 [default = 0];
  if (has_xmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->xmin(), target);
  }
  
  // required double xmax = 3 [default = 0];
  if (has_xmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->xmax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GridSystemHeader_dim_description_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 size = 1 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }
    
    // required double xmin = 2 [default = 0];
    if (has_xmin()) {
      total_size += 1 + 8;
    }
    
    // required double xmax = 3 [default = 0];
    if (has_xmax()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridSystemHeader_dim_description_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridSystemHeader_dim_description_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridSystemHeader_dim_description_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridSystemHeader_dim_description_t::MergeFrom(const GridSystemHeader_dim_description_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_xmin()) {
      set_xmin(from.xmin());
    }
    if (from.has_xmax()) {
      set_xmax(from.xmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridSystemHeader_dim_description_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridSystemHeader_dim_description_t::CopyFrom(const GridSystemHeader_dim_description_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridSystemHeader_dim_description_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GridSystemHeader_dim_description_t::Swap(GridSystemHeader_dim_description_t* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(xmin_, other->xmin_);
    std::swap(xmax_, other->xmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridSystemHeader_dim_description_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridSystemHeader_dim_description_t_descriptor_;
  metadata.reflection = GridSystemHeader_dim_description_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GridSystemHeader::kDimsFieldNumber;
const int GridSystemHeader::kDimFieldNumber;
const int GridSystemHeader::kDataSizeFieldNumber;
#endif  // !_MSC_VER

GridSystemHeader::GridSystemHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GridSystemHeader::InitAsDefaultInstance() {
}

GridSystemHeader::GridSystemHeader(const GridSystemHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GridSystemHeader::SharedCtor() {
  _cached_size_ = 0;
  dims_ = 0u;
  data_size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridSystemHeader::~GridSystemHeader() {
  SharedDtor();
}

void GridSystemHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridSystemHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridSystemHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridSystemHeader_descriptor_;
}

const GridSystemHeader& GridSystemHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GridSystem_2epro();  return *default_instance_;
}

GridSystemHeader* GridSystemHeader::default_instance_ = NULL;

GridSystemHeader* GridSystemHeader::New() const {
  return new GridSystemHeader;
}

void GridSystemHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dims_ = 0u;
    data_size_ = GOOGLE_ULONGLONG(0);
  }
  dim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridSystemHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dims = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dims_)));
          set_has_dims();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dim;
        break;
      }
      
      // repeated .QDLIB.GridSystemHeader.dim_description_t dim = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dim:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dim()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dim;
        if (input->ExpectTag(24)) goto parse_data_size;
        break;
      }
      
      // optional uint64 data_size = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_size_)));
          set_has_data_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GridSystemHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 dims = 1 [default = 0];
  if (has_dims()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dims(), output);
  }
  
  // repeated .QDLIB.GridSystemHeader.dim_description_t dim = 2;
  for (int i = 0; i < this->dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dim(i), output);
  }
  
  // optional uint64 data_size = 3 [default = 0];
  if (has_data_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->data_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GridSystemHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 dims = 1 [default = 0];
  if (has_dims()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dims(), target);
  }
  
  // repeated .QDLIB.GridSystemHeader.dim_description_t dim = 2;
  for (int i = 0; i < this->dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dim(i), target);
  }
  
  // optional uint64 data_size = 3 [default = 0];
  if (has_data_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->data_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GridSystemHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dims = 1 [default = 0];
    if (has_dims()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dims());
    }
    
    // optional uint64 data_size = 3 [default = 0];
    if (has_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->data_size());
    }
    
  }
  // repeated .QDLIB.GridSystemHeader.dim_description_t dim = 2;
  total_size += 1 * this->dim_size();
  for (int i = 0; i < this->dim_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dim(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridSystemHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridSystemHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridSystemHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridSystemHeader::MergeFrom(const GridSystemHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  dim_.MergeFrom(from.dim_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dims()) {
      set_dims(from.dims());
    }
    if (from.has_data_size()) {
      set_data_size(from.data_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridSystemHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridSystemHeader::CopyFrom(const GridSystemHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridSystemHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < dim_size(); i++) {
    if (!this->dim(i).IsInitialized()) return false;
  }
  return true;
}

void GridSystemHeader::Swap(GridSystemHeader* other) {
  if (other != this) {
    std::swap(dims_, other->dims_);
    dim_.Swap(&other->dim_);
    std::swap(data_size_, other->data_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridSystemHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridSystemHeader_descriptor_;
  metadata.reflection = GridSystemHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QDLIB

// @@protoc_insertion_point(global_scope)
