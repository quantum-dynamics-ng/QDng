// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IACmds.proto

#ifndef PROTOBUF_IACmds_2eproto__INCLUDED
#define PROTOBUF_IACmds_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace QDLIB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_IACmds_2eproto();
void protobuf_AssignDesc_IACmds_2eproto();
void protobuf_ShutdownFile_IACmds_2eproto();

class Command;
class Response;

enum Command_command_t {
  Command_command_t_QUIT = 0,
  Command_command_t_RUN_PROG = 1,
  Command_command_t_READ_WF = 2,
  Command_command_t_WRITE_WF = 3,
  Command_command_t_READ_OP = 4,
  Command_command_t_WRITE_OP = 5,
  Command_command_t_LOAD_OP = 6,
  Command_command_t_GET_EXPEC = 7,
  Command_command_t_GET_MATEL = 8,
  Command_command_t_APPLY_OP = 9,
  Command_command_t_GET_GLOBAL_PARAMS = 20,
  Command_command_t_SET_GLOBAL_PARAMS = 21
};
bool Command_command_t_IsValid(int value);
const Command_command_t Command_command_t_command_t_MIN = Command_command_t_QUIT;
const Command_command_t Command_command_t_command_t_MAX = Command_command_t_SET_GLOBAL_PARAMS;
const int Command_command_t_command_t_ARRAYSIZE = Command_command_t_command_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* Command_command_t_descriptor();
inline const ::std::string& Command_command_t_Name(Command_command_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    Command_command_t_descriptor(), value);
}
inline bool Command_command_t_Parse(
    const ::std::string& name, Command_command_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Command_command_t>(
    Command_command_t_descriptor(), name, value);
}
enum Response_response_t {
  Response_response_t_OK = 0,
  Response_response_t_ERROR_MSG = 1,
  Response_response_t_ERROR = 2
};
bool Response_response_t_IsValid(int value);
const Response_response_t Response_response_t_response_t_MIN = Response_response_t_OK;
const Response_response_t Response_response_t_response_t_MAX = Response_response_t_ERROR;
const int Response_response_t_response_t_ARRAYSIZE = Response_response_t_response_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_response_t_descriptor();
inline const ::std::string& Response_response_t_Name(Response_response_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_response_t_descriptor(), value);
}
inline bool Response_response_t_Parse(
    const ::std::string& name, Response_response_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_response_t>(
    Response_response_t_descriptor(), name, value);
}
// ===================================================================

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();
  
  Command(const Command& from);
  
  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();
  
  void Swap(Command* other);
  
  // implements Message ----------------------------------------------
  
  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Command_command_t command_t;
  static const command_t QUIT = Command_command_t_QUIT;
  static const command_t RUN_PROG = Command_command_t_RUN_PROG;
  static const command_t READ_WF = Command_command_t_READ_WF;
  static const command_t WRITE_WF = Command_command_t_WRITE_WF;
  static const command_t READ_OP = Command_command_t_READ_OP;
  static const command_t WRITE_OP = Command_command_t_WRITE_OP;
  static const command_t LOAD_OP = Command_command_t_LOAD_OP;
  static const command_t GET_EXPEC = Command_command_t_GET_EXPEC;
  static const command_t GET_MATEL = Command_command_t_GET_MATEL;
  static const command_t APPLY_OP = Command_command_t_APPLY_OP;
  static const command_t GET_GLOBAL_PARAMS = Command_command_t_GET_GLOBAL_PARAMS;
  static const command_t SET_GLOBAL_PARAMS = Command_command_t_SET_GLOBAL_PARAMS;
  static inline bool command_t_IsValid(int value) {
    return Command_command_t_IsValid(value);
  }
  static const command_t command_t_MIN =
    Command_command_t_command_t_MIN;
  static const command_t command_t_MAX =
    Command_command_t_command_t_MAX;
  static const int command_t_ARRAYSIZE =
    Command_command_t_command_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  command_t_descriptor() {
    return Command_command_t_descriptor();
  }
  static inline const ::std::string& command_t_Name(command_t value) {
    return Command_command_t_Name(value);
  }
  static inline bool command_t_Parse(const ::std::string& name,
      command_t* value) {
    return Command_command_t_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .QDLIB.Command.command_t cmd = 1 [default = QUIT];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::QDLIB::Command_command_t cmd() const;
  inline void set_cmd(::QDLIB::Command_command_t value);
  
  // optional string XML = 2;
  inline bool has_xml() const;
  inline void clear_xml();
  static const int kXMLFieldNumber = 2;
  inline const ::std::string& xml() const;
  inline void set_xml(const ::std::string& value);
  inline void set_xml(const char* value);
  inline void set_xml(const char* value, size_t size);
  inline ::std::string* mutable_xml();
  inline ::std::string* release_xml();
  
  // optional string param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline const ::std::string& param1() const;
  inline void set_param1(const ::std::string& value);
  inline void set_param1(const char* value);
  inline void set_param1(const char* value, size_t size);
  inline ::std::string* mutable_param1();
  inline ::std::string* release_param1();
  
  // optional string param2 = 4;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 4;
  inline const ::std::string& param2() const;
  inline void set_param2(const ::std::string& value);
  inline void set_param2(const char* value);
  inline void set_param2(const char* value, size_t size);
  inline ::std::string* mutable_param2();
  inline ::std::string* release_param2();
  
  // optional string param3 = 5;
  inline bool has_param3() const;
  inline void clear_param3();
  static const int kParam3FieldNumber = 5;
  inline const ::std::string& param3() const;
  inline void set_param3(const ::std::string& value);
  inline void set_param3(const char* value);
  inline void set_param3(const char* value, size_t size);
  inline ::std::string* mutable_param3();
  inline ::std::string* release_param3();
  
  // @@protoc_insertion_point(class_scope:QDLIB.Command)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_xml();
  inline void clear_has_xml();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_param3();
  inline void clear_has_param3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* xml_;
  ::std::string* param1_;
  ::std::string* param2_;
  ::std::string* param3_;
  int cmd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_IACmds_2eproto();
  friend void protobuf_AssignDesc_IACmds_2eproto();
  friend void protobuf_ShutdownFile_IACmds_2eproto();
  
  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();
  
  Response(const Response& from);
  
  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();
  
  void Swap(Response* other);
  
  // implements Message ----------------------------------------------
  
  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Response_response_t response_t;
  static const response_t OK = Response_response_t_OK;
  static const response_t ERROR_MSG = Response_response_t_ERROR_MSG;
  static const response_t ERROR = Response_response_t_ERROR;
  static inline bool response_t_IsValid(int value) {
    return Response_response_t_IsValid(value);
  }
  static const response_t response_t_MIN =
    Response_response_t_response_t_MIN;
  static const response_t response_t_MAX =
    Response_response_t_response_t_MAX;
  static const int response_t_ARRAYSIZE =
    Response_response_t_response_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  response_t_descriptor() {
    return Response_response_t_descriptor();
  }
  static inline const ::std::string& response_t_Name(response_t value) {
    return Response_response_t_Name(value);
  }
  static inline bool response_t_Parse(const ::std::string& name,
      response_t* value) {
    return Response_response_t_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .QDLIB.Response.response_t response = 1 [default = OK];
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 1;
  inline ::QDLIB::Response_response_t response() const;
  inline void set_response(::QDLIB::Response_response_t value);
  
  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  
  // @@protoc_insertion_point(class_scope:QDLIB.Response)
 private:
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_msg();
  inline void clear_has_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* msg_;
  int response_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_IACmds_2eproto();
  friend void protobuf_AssignDesc_IACmds_2eproto();
  friend void protobuf_ShutdownFile_IACmds_2eproto();
  
  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Command

// required .QDLIB.Command.command_t cmd = 1 [default = QUIT];
inline bool Command::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::QDLIB::Command_command_t Command::cmd() const {
  return static_cast< ::QDLIB::Command_command_t >(cmd_);
}
inline void Command::set_cmd(::QDLIB::Command_command_t value) {
  GOOGLE_DCHECK(::QDLIB::Command_command_t_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional string XML = 2;
inline bool Command::has_xml() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_xml() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_xml() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_xml() {
  if (xml_ != &::google::protobuf::internal::kEmptyString) {
    xml_->clear();
  }
  clear_has_xml();
}
inline const ::std::string& Command::xml() const {
  return *xml_;
}
inline void Command::set_xml(const ::std::string& value) {
  set_has_xml();
  if (xml_ == &::google::protobuf::internal::kEmptyString) {
    xml_ = new ::std::string;
  }
  xml_->assign(value);
}
inline void Command::set_xml(const char* value) {
  set_has_xml();
  if (xml_ == &::google::protobuf::internal::kEmptyString) {
    xml_ = new ::std::string;
  }
  xml_->assign(value);
}
inline void Command::set_xml(const char* value, size_t size) {
  set_has_xml();
  if (xml_ == &::google::protobuf::internal::kEmptyString) {
    xml_ = new ::std::string;
  }
  xml_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_xml() {
  set_has_xml();
  if (xml_ == &::google::protobuf::internal::kEmptyString) {
    xml_ = new ::std::string;
  }
  return xml_;
}
inline ::std::string* Command::release_xml() {
  clear_has_xml();
  if (xml_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xml_;
    xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string param1 = 3;
inline bool Command::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command::clear_param1() {
  if (param1_ != &::google::protobuf::internal::kEmptyString) {
    param1_->clear();
  }
  clear_has_param1();
}
inline const ::std::string& Command::param1() const {
  return *param1_;
}
inline void Command::set_param1(const ::std::string& value) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(value);
}
inline void Command::set_param1(const char* value) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(value);
}
inline void Command::set_param1(const char* value, size_t size) {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  param1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_param1() {
  set_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    param1_ = new ::std::string;
  }
  return param1_;
}
inline ::std::string* Command::release_param1() {
  clear_has_param1();
  if (param1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param1_;
    param1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string param2 = 4;
inline bool Command::has_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Command::set_has_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Command::clear_has_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Command::clear_param2() {
  if (param2_ != &::google::protobuf::internal::kEmptyString) {
    param2_->clear();
  }
  clear_has_param2();
}
inline const ::std::string& Command::param2() const {
  return *param2_;
}
inline void Command::set_param2(const ::std::string& value) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(value);
}
inline void Command::set_param2(const char* value) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(value);
}
inline void Command::set_param2(const char* value, size_t size) {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  param2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_param2() {
  set_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    param2_ = new ::std::string;
  }
  return param2_;
}
inline ::std::string* Command::release_param2() {
  clear_has_param2();
  if (param2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param2_;
    param2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string param3 = 5;
inline bool Command::has_param3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Command::set_has_param3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Command::clear_has_param3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Command::clear_param3() {
  if (param3_ != &::google::protobuf::internal::kEmptyString) {
    param3_->clear();
  }
  clear_has_param3();
}
inline const ::std::string& Command::param3() const {
  return *param3_;
}
inline void Command::set_param3(const ::std::string& value) {
  set_has_param3();
  if (param3_ == &::google::protobuf::internal::kEmptyString) {
    param3_ = new ::std::string;
  }
  param3_->assign(value);
}
inline void Command::set_param3(const char* value) {
  set_has_param3();
  if (param3_ == &::google::protobuf::internal::kEmptyString) {
    param3_ = new ::std::string;
  }
  param3_->assign(value);
}
inline void Command::set_param3(const char* value, size_t size) {
  set_has_param3();
  if (param3_ == &::google::protobuf::internal::kEmptyString) {
    param3_ = new ::std::string;
  }
  param3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_param3() {
  set_has_param3();
  if (param3_ == &::google::protobuf::internal::kEmptyString) {
    param3_ = new ::std::string;
  }
  return param3_;
}
inline ::std::string* Command::release_param3() {
  clear_has_param3();
  if (param3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = param3_;
    param3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Response

// required .QDLIB.Response.response_t response = 1 [default = OK];
inline bool Response::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_response() {
  response_ = 0;
  clear_has_response();
}
inline ::QDLIB::Response_response_t Response::response() const {
  return static_cast< ::QDLIB::Response_response_t >(response_);
}
inline void Response::set_response(::QDLIB::Response_response_t value) {
  GOOGLE_DCHECK(::QDLIB::Response_response_t_IsValid(value));
  set_has_response();
  response_ = value;
}

// optional string msg = 2;
inline bool Response::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Response::msg() const {
  return *msg_;
}
inline void Response::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Response::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Response::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Response::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Response::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QDLIB

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QDLIB::Command_command_t>() {
  return ::QDLIB::Command_command_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QDLIB::Response_response_t>() {
  return ::QDLIB::Response_response_t_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IACmds_2eproto__INCLUDED
